# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # Parameters are values which are used directly in the code.
    app.storage_public_source: '%env(STORAGE_PUBLIC_SOURCE)%'
    app.storage_private_source: '%env(STORAGE_PRIVATE_SOURCE)%'
    app.storage_public_bucket: '%env(STORAGE_PUBLIC_BUCKET)%'
    app.storage_private_bucket: '%env(STORAGE_PRIVATE_BUCKET)%'
    app.mail_title: '%env(APP_NAME)%'
    app.mail_from_address: '%env(MAIL_FROM_ADDRESS)%'
    app.mail_from_name: '%env(MAIL_FROM_NAME)%'
    app.mail_webapp_url: '%env(MAIL_WEBAPP_URL)%'
    app.mail_webapp_update_password_route_format: '%env(MAIL_WEBAPP_UPDATE_PASSWORD_ROUTE_FORMAT)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/Domain/{Throwable,Model,ResultIterator}'
            - '../src/Infrastructure/S3'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Infrastructure\Controller\:
        resource: '../src/Infrastructure/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # A special kind of formatter that logs the stack traces (otherwise, Symfony logs do not contain stack traces).
    formatterWithStackTrace:
        class: Monolog\Formatter\LineFormatter
        calls:
            - [ includeStacktraces ]

    # Session storage.
    Symfony\Component\HttpFoundation\Session\Storage\Handler\PdoSessionHandler:
        arguments:
            - '%env(DATABASE_URL)%'

    # Event listeners/subscribers.
    App\Infrastructure\EventListener\NoBeanFoundExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    App\Infrastructure\EventSubscriber\LocaleSubscriber:
        arguments:
            - '%kernel.default_locale%'

    # Commands.
    App\Infrastructure\Command\InitializeS3StorageCommand:
        arguments:
            $client: '@s3.client'
            $publicBucket: '%app.storage_public_bucket%'
            $privateBucket: '%app.storage_private_bucket%'
            $publicSource: '%app.storage_public_source%'
            $privateSource: '%app.storage_private_source%'

    # Use cases.
    App\UseCase\CreateEmail:
        arguments:
            $mailTitle: '%app.mail_title%'
            $mailFromAddress: '%app.mail_from_address%'
            $mailFromName: '%app.mail_from_name%'

    App\UseCase\User\ResetPassword\CreateResetPasswordEmail:
        arguments:
            $mailTitle: '%app.mail_title%'
            $mailFromAddress: '%app.mail_from_address%'
            $mailFromName: '%app.mail_from_name%'
            $mailWebappURL: '%app.mail_webapp_url%'
            $mailWebappUpdatePasswordRouteFormat: '%app.mail_webapp_update_password_route_format%'