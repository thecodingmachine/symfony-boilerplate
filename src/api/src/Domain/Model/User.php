<?php
/*
 * This file has been automatically generated by TDBM.
 * You can edit this file as it will not be overwritten.
 */

declare(strict_types=1);

namespace App\Domain\Model;

use App\Domain\Constraint as DomainAssert;
use App\Domain\Enum\Locale;
use App\Domain\Enum\Role;
use App\Domain\Model\Generated\BaseUser;
use Serializable;
use Symfony\Component\Security\Core\User\EquatableInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;
use TheCodingMachine\GraphQLite\Annotations as GraphQLite;

use function count;
use function is_array;
use function Safe\password_hash;
use function serialize;
use function strval;
use function unserialize;

use const PASSWORD_DEFAULT;

/**
 * The User class maps the 'users' table in database.
 *
 * @DomainAssert\Unicity(table="users", column="email", message="user.email_not_unique", className=User::class)
 */
#[GraphQLite\Type]
#[GraphQLite\SourceField(name: 'id', outputType: 'ID')]
#[GraphQLite\SourceField(name: 'firstName')]
#[GraphQLite\SourceField(name: 'lastName')]
#[GraphQLite\SourceField(name: 'email')]
#[GraphQLite\SourceField(name: 'locale')]
#[GraphQLite\SourceField(name: 'profilePicture')]
#[GraphQLite\SourceField(name: 'role')]
#[GraphQLite\SourceField(name: 'activated')]
class User extends BaseUser implements UserInterface, Serializable, EquatableInterface
{
    public function __construct(
        string $firstName,
        string $lastName,
        string $email,
        Locale $locale,
        Role $role,
    ) {
        parent::__construct(
            firstName: $firstName,
            lastName : $lastName,
            email    : $email,
            locale   : strval($locale),
            role     : strval($role),
        );
    }

    #[Assert\NotBlank(message: 'not_blank')]
    #[Assert\Length(max: 255, maxMessage: 'max_length_255')]
    public function getFirstName(): string
    {
        return parent::getFirstName();
    }

    #[Assert\NotBlank(message: 'not_blank')]
    #[Assert\Length(max: 255, maxMessage: 'max_length_255')]
    public function getLastName(): string
    {
        return parent::getLastName();
    }

    #[Assert\NotBlank(message: 'not_blank')]
    #[Assert\Length(max: 255, maxMessage: 'max_length_255')]
    #[Assert\Email(message: 'invalid_email')]
    public function getEmail(): string
    {
        return parent::getEmail();
    }

    public function setPassword(?string $password): void
    {
        if ($password === null) {
            parent::setPassword($password);

            return;
        }

        parent::setPassword(password_hash($password, PASSWORD_DEFAULT));
    }

    #[Assert\Choice(callback: [Locale::class, 'valuesAsArray'], message: 'user.invalid_locale')]
    public function getLocale(): string
    {
        return parent::getLocale();
    }

    #[Assert\Choice(callback: [Role::class, 'valuesAsArray'], message: 'user.invalid_role')]
    public function getRole(): string
    {
        return parent::getRole();
    }

    public function isActivated(): bool
    {
        return $this->getPassword() !== null;
    }

    /*
     * This whole part with the $userNameFromSerialize property is a hack to make User serializable.
     * Actually, if we implement the EquatableInterface from Symfony, the only thing that needs to be serialized is
     * the userName (the email in our case).
     * Therefore, we put the user name in a property that can be serialized/unserialized via the methods of the
     * Serializable interface.
     * The unserialized object only contains the "$userNameFromSerialize" property but this is not a problem.
     * The UserProvider will be called to load the full object from the user name.
     */
    private ?string $userNameFromSerialize = null;

    public function getUsername(): string
    {
        if ($this->userNameFromSerialize === null) {
            $this->userNameFromSerialize = $this->getEmail();
        }

        return $this->userNameFromSerialize;
    }

    public function eraseCredentials(): void
    {
        // No need to do anything. No sensitive data is ever stored.
    }

    public function getSalt(): ?string
    {
        return null;
    }

    /**
     * @return string[]
     */
    public function getRoles(): array
    {
        return [
            'ROLE_' . $this->getRole(),
        ];
    }

    public function serialize(): string
    {
        if ($this->userNameFromSerialize === null) {
            $this->userNameFromSerialize = $this->getEmail();
        }

        return serialize([$this->userNameFromSerialize]);
    }

    public function unserialize(string $data): void
    {
        $data = unserialize($data);
        if (! is_array($data) || count($data) !== 1) {
            return;
        }

        $this->userNameFromSerialize = $data[0];
    }

    /**
     * The equality comparison should neither be done by referential equality
     * nor by comparing identities (i.e. getId() === getId()).
     *
     * However, you do not need to compare every attribute, but only those that
     * are relevant for assessing whether re-authentication is required.
     */
    public function isEqualTo(UserInterface $user): bool
    {
        return $this->getUsername() === $user->getUsername();
    }
}
