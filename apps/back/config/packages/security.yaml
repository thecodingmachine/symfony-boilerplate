security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            security: true
            lazy: true
            provider: app_user_provider
            logout:
                path: app_logout
            json_login:
                check_path: api_login
            entry_point: App\Authenticator\LoginFormAuthenticationEntryPoint
    #         custom_authenticators:
    #           - 'App\Authenticator\Saml2Authenticator'

            # activate differents ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/%app.api.url.prefix%/login$', roles: PUBLIC_ACCESS }
        - { path: '^/%app.api.url.prefix%/auth/sso/', roles: PUBLIC_ACCESS }
        - { path: '^/%app.api.url.prefix%/healthcheck$', roles: PUBLIC_ACCESS }
        - { path: '^/%app.api.url.prefix%/', roles: IS_AUTHENTICATED_FULLY }

    role_hierarchy:
        ROLE_ADMIN:
            - ROLE_RIGHT_ACCESS
            - ROLE_RIGHT_USER_READ
            - ROLE_RIGHT_USER_CREATE
            - ROLE_RIGHT_USER_DELETE
            - ROLE_RIGHT_USER_UPDATE
        ROLE_USER:
            - ROLE_RIGHT_ACCESS


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
