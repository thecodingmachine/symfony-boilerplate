(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{137:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?a.a.createElement(b,s(s({ref:t},c),{},{components:n})):a.a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return p}));var r=n(3),a=n(7),o=(n(0),n(137)),i={title:"GraphQL",slug:"/validation/graphql"},s={unversionedId:"10_Validation/4_GraphQL",id:"10_Validation/4_GraphQL",isDocsHomePage:!1,title:"GraphQL",description:"Most of the time, validation for the GraphQL API does not require extra work:",source:"@site/docs/10_Validation/4_GraphQL.md",slug:"/validation/graphql",permalink:"/symfony-boilerplate/docs/validation/graphql",editUrl:"https://github.com/thecodingmachine/symfony-boilerplate/tree/master/docs/docs/10_Validation/4_GraphQL.md",version:"current",sidebar:"docs",previous:{title:"Use Cases",permalink:"/symfony-boilerplate/docs/validation/use-cases"},next:{title:"Forms",permalink:"/symfony-boilerplate/docs/validation/forms"}},l=[],c={toc:l};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Most of the time, validation for the GraphQL API does not require extra work:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://graphqlite.thecodingmachine.io/"},"GraphQLite")," translates your models (with ",Object(o.b)("inlineCode",{parentName:"li"},"@Type")," and ",Object(o.b)("inlineCode",{parentName:"li"},"@SourceField")," annotations)\ninto strongly typed GraphQL types."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://graphqlite.thecodingmachine.io/"},"GraphQLite")," translates your use cases' methods' signatures\n(with ",Object(o.b)("inlineCode",{parentName:"li"},"@Mutation")," or ",Object(o.b)("inlineCode",{parentName:"li"},"@Query")," annotations) into strongly typed GraphQL mutations or queries."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://graphqlite.thecodingmachine.io/"},"GraphQLite")," resolves the ",Object(o.b)("inlineCode",{parentName:"li"},"InvalidModel")," and ",Object(o.b)("inlineCode",{parentName:"li"},"InvalidStorable")," exceptions\ninto valid GraphQL responses (400 HTTP code).")),Object(o.b)("p",null,"However, you may have some use cases that are GraphQL mutations or queries, and these use cases do not manipulate models\n(i.e., no ",Object(o.b)("inlineCode",{parentName:"p"},"InvalidModel")," nor ",Object(o.b)("inlineCode",{parentName:"p"},"InvalidStorable")," exceptions)."),Object(o.b)("p",null,"For such scenarios, ",Object(o.b)("a",{parentName:"p",href:"https://graphqlite.thecodingmachine.io/"},"GraphQLite")," provides the ",Object(o.b)("inlineCode",{parentName:"p"},"@Assertion")," annotation:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-php",metastring:'title="src/api/src/UseCase/User/ResetPassword/ResetPassword.php"',title:'"src/api/src/UseCase/User/ResetPassword/ResetPassword.php"'},'use Symfony\\Component\\Validator\\Constraints as Assert;\nuse TheCodingMachine\\GraphQLite\\Annotations\\Mutation;\nuse TheCodingMachine\\Graphqlite\\Validator\\Annotations\\Assertion;\n\n/**\n * @Mutation\n * @Assertion(for="email", constraint={@Assert\\NotBlank(message="not_blank"), @Assert\\Length(max=255, maxMessage="max_length_255"), @Assert\\Email(message="invalid_email")})\n */\npublic function resetPassword(string $email): bool;\n')),Object(o.b)("p",null,"Here, ",Object(o.b)("a",{parentName:"p",href:"https://graphqlite.thecodingmachine.io/"},"GraphQLite")," validates the ",Object(o.b)("inlineCode",{parentName:"p"},"email")," argument according to the list of\nconstraints."),Object(o.b)("p",null,"Only caveat is that it does not work if you call your use case in PHP."))}p.isMDXComponent=!0}}]);